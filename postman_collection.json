{
  "info": {
    "name": "Fund Management API",
    "description": "RESTful API for managing private market funds, investors, and investments\n\nQUICK START:\n1. Start server with 'npm run dev'\n2. Run 'List All Funds' to get a fund_id\n3. Run 'List All Investors' to get an investor_id\n4. Manually set those IDs in collection variables (click collection name â†’ Variables)\n5. Now you can test investment endpoints!\n\nNote: Variables auto-update when you Create new resources.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "fund_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "investor_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Funds",
      "item": [
        {
          "name": "List All Funds",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response is an array', function () {",
                  "    pm.expect(pm.response.json()).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/funds",
              "host": ["{{baseUrl}}"],
              "path": ["funds"]
            }
          }
        },
        {
          "name": "Get Fund by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response has correct structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('vintage_year');",
                  "    pm.expect(jsonData).to.have.property('target_size_usd');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/funds/{{fund_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["funds", "{{fund_id}}"]
            }
          }
        },
        {
          "name": "Create Fund",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "pm.test('Response has correct structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('vintage_year');",
                  "    pm.expect(jsonData).to.have.property('target_size_usd');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('created_at');",
                  "});",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('fund_id', jsonData.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Idempotency-Key",
                "value": "{{$randomUUID}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Titanbay Digital Fund I\",\n  \"vintage_year\": 2026,\n  \"target_size_usd\": 750000000.00,\n  \"status\": \"Fundraising\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/funds",
              "host": ["{{baseUrl}}"],
              "path": ["funds"]
            }
          }
        },
        {
          "name": "Update Fund",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"{{fund_id}}\",\n  \"name\": \"Titanbay Growth Fund III\",\n  \"vintage_year\": 2025,\n  \"target_size_usd\": 600000000.00,\n  \"status\": \"Investing\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/funds",
              "host": ["{{baseUrl}}"],
              "path": ["funds"]
            }
          }
        }
      ]
    },
    {
      "name": "Investors",
      "item": [
        {
          "name": "List All Investors",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response is an array', function () {",
                  "    pm.expect(pm.response.json()).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/investors",
              "host": ["{{baseUrl}}"],
              "path": ["investors"]
            }
          }
        },
        {
          "name": "Create Investor",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "pm.test('Response has correct structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('investor_type');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('created_at');",
                  "});",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('investor_id', jsonData.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Idempotency-Key",
                "value": "{{$randomUUID}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Blackstone Group\",\n  \"investor_type\": \"Family Office\",\n  \"email\": \"investments@blackstone.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/investors",
              "host": ["{{baseUrl}}"],
              "path": ["investors"]
            }
          }
        }
      ]
    },
    {
      "name": "Investments",
      "item": [
        {
          "name": "List Investments by Fund",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response is an array', function () {",
                  "    pm.expect(pm.response.json()).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/funds/{{fund_id}}/investments",
              "host": ["{{baseUrl}}"],
              "path": ["funds", "{{fund_id}}", "investments"]
            }
          }
        },
        {
          "name": "Create Investment",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "pm.test('Response has correct structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('investor_id');",
                  "    pm.expect(jsonData).to.have.property('fund_id');",
                  "    pm.expect(jsonData).to.have.property('amount_usd');",
                  "    pm.expect(jsonData).to.have.property('investment_date');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Idempotency-Key",
                "value": "{{$randomUUID}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"investor_id\": \"{{investor_id}}\",\n  \"amount_usd\": 75000000.00,\n  \"investment_date\": \"2025-10-26\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/funds/{{fund_id}}/investments",
              "host": ["{{baseUrl}}"],
              "path": ["funds", "{{fund_id}}", "investments"]
            }
          }
        }
      ]
    },
    {
      "name": "Validation Tests",
      "item": [
        {
          "name": "Create Fund - Missing Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"vintage_year\": 2025,\n  \"target_size_usd\": 500000000.00,\n  \"status\": \"Fundraising\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/funds",
              "host": ["{{baseUrl}}"],
              "path": ["funds"]
            }
          }
        },
        {
          "name": "Create Fund - Invalid Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Fund\",\n  \"vintage_year\": 2025,\n  \"target_size_usd\": 500000000.00,\n  \"status\": \"InvalidStatus\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/funds",
              "host": ["{{baseUrl}}"],
              "path": ["funds"]
            }
          }
        },
        {
          "name": "Create Investor - Invalid Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Investor\",\n  \"investor_type\": \"Individual\",\n  \"email\": \"invalid-email\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/investors",
              "host": ["{{baseUrl}}"],
              "path": ["investors"]
            }
          }
        },
        {
          "name": "Create Investment - Invalid Date",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Idempotency-Key",
                "value": "{{$randomUUID}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"investor_id\": \"{{investor_id}}\",\n  \"amount_usd\": 50000000.00,\n  \"investment_date\": \"2025-13-45\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/funds/{{fund_id}}/investments",
              "host": ["{{baseUrl}}"],
              "path": ["funds", "{{fund_id}}", "investments"]
            }
          }
        },
        {
          "name": "Get Fund - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/funds/00000000-0000-0000-0000-000000000000",
              "host": ["{{baseUrl}}"],
              "path": ["funds", "00000000-0000-0000-0000-000000000000"]
            }
          }
        }
      ]
    }
  ]
}
